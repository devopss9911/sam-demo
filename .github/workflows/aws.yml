name: Deploy image to ECS
on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: Environment
        options:
        - stage
        - devp
        
      imageTag: 
        description: 'Squire backend image tag to deploy'
        required: true
        default: 'latest' 
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: squire
  ECS_SERVICE: gosquire-stage-task
  ECS_CLUSTER: staging-cluster
  ECS_TASK_DEFINITION: ./task-definition-stage.json
  CONTAINER_NAME: gosquire-stage-task

jobs:
    deploy:
      runs-on: ubuntu-latest
      name: Deploy
      # container:
      #   image: public.ecr.aws/p4l5a9q1/github_actions_utils:latest
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_DEFAULT_REGION: "us-east-1"

      steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: "us-east-1"

        - name: Chosen image tag
          run: echo ${{ github.event.inputs.imageTag }}

        - name: Login to ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
        
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ github.event.inputs.imageTag }}
        
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true

        - name: Send slack notification on failure
          if:  ${{ failure() }}
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_BACKEND }}
            SLACK_COLOR: ${{ job.status }}
            MSG_MINIMAL: actions url
            SLACK_TITLE: "Backend Deployment Status"
            SLACK_MESSAGE: ':bangbang: Backend deployment *FAILED* with image tag:* ${{ github.event.inputs.imageTag }}* in environment:* ${{ github.event.inputs.env }}*  :bangbang:*' 
     
